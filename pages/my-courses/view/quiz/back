import React, { useEffect, useState,useCallback, Component } from 'react'
import PageBanner from '@/components/Common/PageBanner'
import Link from 'next/link'
import { parseCookies } from 'nookies'
import axios from 'axios'
import baseUrl from '@/utils/baseUrl'
import {useRouter} from "next/router"
import ReactDOM from "react-dom";
import Router from 'next/router'
 
const SingleQuiz = () => {
const [userid, setUserid] = React.useState()
const router = useRouter();
const {id} = router.query;
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [showScore, setShowScore] = useState(false);
  const [score, setScore] = useState(0);
  const [quizid, setQuizid] = useState(0);
  const [crsid, setCrsid] = useState(0);
  const [passingmark, setPassingmark] = useState(0);
  const [qs, setQs] = React.useState([]);
  const [questions, setQuestions] = React.useState([{"id":"0","question":"loading"}]);
  const [options, setOptions] = React.useState([]);
  const [courseName, setcourseName] = React.useState(0);
  const [bgColor, setbgColor] = React.useState('aliceblue');
  const [completedQuiz, setCompletedQuiz] = React.useState([]);
  const [selectedans, setSelectedans] = React.useState([]);
  const [ansgiven, setAnsgiven] = React.useState([]);
  const [obj, setObj] = React.useState([]);
  const [flag, setFlag] = useState(0);

    useEffect(() => {
        getOptions();
        passingmarks();
        setQuizid(id);
        localStorage.setItem('flagmatch', 0);
        setcourseName(localStorage.getItem('crsname'));
        axios.get('https://winupskill.in/api/api/questions?quiz_id='+id)
            .then(QQ=> {
                setQuestions(QQ.data.data)
           
            })
            .catch(function (error) {
                console.log(error);
            })
    }, [])

  
    const getOptions = async() => {
           const url = `https://winupskill.in/api/api/qsoptions`
            var response = await axios.get(url).then(
             options => {
                setOptions(options.data.data)
             })
    }

    const passingmarks = async() => {
           const url = `https://winupskill.in/api/api/quiz?id=${id}`
            var responsep = await axios.get(url).then(
             quizs => {
                setPassingmark(quizs.data.data[0].passingmarks,
                setCrsid(quizs.data.data[0].course_id)

                  )
             })
    }

    
    

    const delay = ms => new Promise(
      resolve => setTimeout(resolve, ms)
    );

  const handleAnswerOptionClicksub = async (sub) => {
    const newObject = { 
            qid: sub.question_id, 
            opnid: sub.id,
            correct: sub.correct

        }; 
      
        setObj(newObject);
    
        handleAnswerOptionClick(sub.correct);
        const result = ansgiven.find(obj => obj.qid == parseInt(sub.question_id));
          ansgiven.forEach(el => {
          if(parseInt(el.qid) == parseInt(sub.question_id)){
            console.log("found match");
            localStorage.setItem('flagmatch', 1);
     
                 // handleDelete(result.qid, newObject);
           }
          });

           const tmpflag = localStorage.getItem('flagmatch');
         
          console.log("flag from LS",tmpflag);

          if(tmpflag == 1){
            console.log("in flagif");
              ansgiven = ansgiven.map(ansss => {
                var tempdelopn = ansss.opnid;
                  if (parseInt(ansss.qid) == sub.question_id) {

                      console.log("del & replace",ansss.opnid,sub.id);

                      console.log("selectedans-109",selectedans);
                        if(selectedans){
                          selectedans = selectedans.filter((number) => number !== parseInt(ansss.opnid));
                          console.log("selectedans-111",selectedans);
                          const selectedans = [...selectedans,sub.id];
                        }


                        delnreplace(ansss.opnid,sub.id);
                      return { ...ansss, opnid: sub.id, correct: sub.correct };
                    }
                    return ansss;
                  console.log("del & replace",ansss.opnid,sub.id);
                  const filteredArray2 = selectedans.filter((number) => number !== parseInt(element.opnid));
      
                  console.log("selectedans-109",selectedans);
                  selectedans = selectedans.filter((number) => number !== parseInt(ansss.opnid));
                  console.log("selectedans-111",selectedans);
                  const selectedans = [...selectedans,sub.id];
      

              });
            localStorage.setItem('flagmatch', 0);

            
          }
          else{
            console.log("in flagelse");
              ansgiven.push(newObject);
              selectedans.push(sub.id);
              console.log("final-ansgiven",ansgiven);
              console.log("final-selectedans",selectedans);

             
          }

      
      console.log("final ansgiven",ansgiven);
      console.log("final selectedans",selectedans);
      
   
   
     


     setbgColor("#592a9c");

      await delay(1000);



    const nextQuestion = currentQuestion + 1;
        if (nextQuestion < questions.length) {
          setCurrentQuestion(nextQuestion);
        } else {
          
          setCurrentQuestion(0);
          //setShowScore(true);
        }

        setbgColor("aliceblue");
    
  }

  const delnreplace = async(opnid,subid) =>{
    console.log("del & replace-167",opnid,subid);
    console.log("init-selectedans",selectedans);

    const filteredArray2 = selectedans.filter((number) => number !== parseInt(opnid));
    const newItems = [...filteredArray2,subid];
    console.log("newItems",newItems);  
    setSelectedans(newItems);




    // selectedans = selectedans.filter((number) => number !== parseInt(opnid));
    // console.log("selectedans-170",selectedans);
    // const selectedans = [...selectedans,subid];
    // console.log("mod-selectedans-172",selectedans);

  }

  const pushtoarray = async() => {
    
  }
   
  const handleAnswerOptionClick = async (correct) => {
    completedQuiz.push(currentQuestion);
      
      if (correct === "Y") {
          setScore(score + 1);
      }

     
    };

   

  function handlequizComplete () {
        const ctx=0;
        const { id } = parseCookies(ctx)
        const qscoredata = new FormData()
        qscoredata.append('action',"coursecomplete")
        qscoredata.append('csrid', crsid)
        qscoredata.append('quizid', quizid)
        qscoredata.append('user_id', id)
        qscoredata.append('score', score)
     
        const response = axios.post('https://winupskill.in/api/api/scores', qscoredata).then(
            result => {
                if (result.status == 200 || result.status == 201){
                    Router.push('/user/my-profile');
                }
            })
  }  

function handleRetake () {
 window.location.reload();
}


const handleDelete = async(id,objj) => {


    console.log("handledel id-158",id);
    const updatedList = ansgiven.filter((item) => item.qid !== id);
    const todel = ansgiven.filter((item) => item.qid === id);
    console.log("todel",todel);






    todel.forEach(element => {
      if(selectedans.includes(element.opnid)){
   
      const filteredArray2 = selectedans.filter((number) => number !== parseInt(element.opnid));
      const newItems = [...filteredArray2,objj.qid];
      console.log("newItems",newItems);
      setSelectedans(newItems);
      }




    });
    
    setAnsgiven(updatedList);
}
   



  

  return ( 
    <React.Fragment>
    

      <PageBanner 
                homePageUrl="/user/my-profile" 
                homePageText="My Courses" 
                activePageText={`${courseName} / Quiz`} 
            />  



        <div className='quizmain'>
			{showScore ? (

        <div>
				<div className='score-section'>
					<h3>You scored {score} out of {questions.length}</h3>


                {questions.map((qss, index) => (
                      <div className='allqss' key={index}>
                        <span className='allqssline'>Question: {index+1}</span>
                        <span className='allqsslinebold'>{qss.question}</span>
                       
                                <ul>
                                  {options.map((opss, index2) => (
                                    <li style={{display: (opss.question_id == qss.id)? 'list-item' : 'none'}}
                                    key={index2}>{opss.option}

                                      <span style={{display: (opss.correct === "Y")? 'inline-flex' : 'none', "marginLeft": "10px", "font-weight":"bold"}}>
                                        - Correct Option 
                                      </span>

                                      <span style={{display: (opss.correct === "N")? 'inline-flex' : 'none', "marginLeft": "10px", "font-weight":"bold"}}>
                                        - Incorrect Option
                                      </span>

                                      <span style={{display: ((opss.question_id == qss.id) && (selectedans.includes(opss.id)))? 'inline-flex' : 'none', "marginLeft": "10px", "font-weight":"bold"}}>
                                        - You answered this
                                      </span>

                                    </li>
                                  ))}
                                </ul>
                                 <span className='allqssline'>Answer rationale: {qss.justification}</span>
                      </div>
                    ))}

          

				</div>		
				

				<div style={{display: (score >= passingmark)? 'block' : 'none'}}>
					<h3>Congratulations! You have passed and successfully completed this course</h3>
          <button className='default-btn'
          onClick={() => handlequizComplete ()}
          >Mark Complete</button>
				</div>

     


        <div style={{display: (score < passingmark)? 'block' : 'none'}}>
          <h3>Unfortunately You did not obtain the passing marks!</h3>
          <button className='default-btn'
          onClick={() => handleRetake ()}>Retake</button>

        </div>

        </div>


			) : (
				<>

        
                <div className='quiz-container'>

               




              		<div className='question-section'>
						<div className='.page-title-content'>
							<span>Question {currentQuestion + 1}</span>/{questions.length}
						</div>
						<div className='question-text'>
						 <h5>{questions[currentQuestion].id}-{questions[currentQuestion].question}</h5>
						</div>
					</div>

					<div className='answer-section'>
		                 {options.length ? options.map(opns => (
		                          <button 
		                          style={{display: (questions[currentQuestion].id == opns.question_id)? 'block' : 'none', 
                              background: (ansgiven.find(ansgiven => ansgiven.opnid === opns.id))? '#f0ebf7': '#fff',

                              }}
                              
		                          key={opns.id} className='option-block'
		                          onClick={() => handleAnswerOptionClicksub(opns)}
                             
		                          >{opns.option}</button>
		                    
		                    )) : (<h3>No Options</h3>)
		                  }
		             </div>


                  <div className='.page-title-content'>

                    <span style={{
                      display: 'block'
                    }}>All Questions</span>

                  {questions.length ? questions.map((questions2, index) => (


                  <a onClick={async e => {
                                          e.preventDefault();
                                          setCurrentQuestion(index);
                                          
                                          }}
                                        >
                  <span className='answerno-btn' key={questions2.id} 
                  style={{backgroundColor: (questions2.id == questions[currentQuestion].id)? '#84c5fe' : '#ffffff'}}
                   style={{background: completedQuiz.includes(index)? '#592a9c': '#fff',
                          color: completedQuiz.includes(index)? '#fff': '#000'}}
                  >

                  
                    {index+1}

                    
                  </span>
                  </a>
                )) : (
                                    <h3>No Questions</h3>
                )}

                </div>

			    </div>

			   </>
			)}
		</div>
      

    </React.Fragment>
  );
};


export default SingleQuiz